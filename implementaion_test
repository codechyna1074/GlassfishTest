/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.test.code;;

import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.ConnectionFactory;
import javax.jms.JMSContext;
import javax.jms.JMSException;
import javax.jms.Queue;
import javax.jms.QueueConnection;
import javax.jms.QueueSender;
import javax.jms.QueueSession;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet(name = "SoapMsgServlet", urlPatterns = {"/SoapMsgServlet"})
public class SoapMsgServlet extends HttpServlet 
{
    //@Resource(mappedName = "testQueue")
    //private Queue queue;

    //@Resource(mappedName = "jms/ConnectionCF")
    //private QueueConnectionFactory queueConnectionFactory;
    
    Context context;
    Queue queue;
   JMSContext jmsContext;

   public static InitialContext getInitialContext() throws JMSException,NamingException{
		Properties properties = new Properties();
		properties.setProperty("java.naming.factory.initial","com.sun.enterprise.naming.SerialInitContextFactory");
		properties.setProperty("java.naming.factory.url.pkgs","com.sun.enterprise.naming");
		properties.setProperty("java.naming.provider.url","iiop://localhost:3700");
		return new InitialContext(properties);
	}

    public SoapMsgServlet() throws NamingException {
        this.queue = (Queue)context.lookup("jms/testQueue");
        this.jmsContext = ((ConnectionFactory) context.lookup("jms/ConnectionCF")).createContext();
        try {
            this.context = SoapMsgServlet.getInitialContext();
        } catch (JMSException ex) {
            Logger.getLogger(SoapMsgServlet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NamingException ex) {
            Logger.getLogger(SoapMsgServlet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException 
    {
         QueueConnection queueConnection = null;
     try {
         queueConnection = (QueueConnection) jmsContext.createMessage();
         queueConnection.start();
         QueueSession queueSession = queueConnection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);
         QueueSender sender = queueSession.createSender(queue);

         TextMessage msg = queueSession.createTextMessage();
         msg.setText("A message from SoapMsgServlet");
         msg.setStringProperty("name", "SoapMsgServlet");

         sender.send(msg);
     } catch (JMSException e) {
         throw new RuntimeException(e);
     } finally {
         try {
             if (queueConnection != null) {
                 queueConnection.close();
             }
         } catch (JMSException e) { //ignore
         }
     }
    }

   
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
    }

    
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}

================================================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.test.code;;

import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.ActivationConfigProperty;
import javax.ejb.MessageDriven;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.xml.soap.AttachmentPart;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPMessage;


@MessageDriven(activationConfig = {
    @ActivationConfigProperty(propertyName = "destinationLookup", propertyValue = "jms/testQueue"),
        @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Queue")
})
public class SoapListenerMDB implements MessageListener 
{
    @SuppressWarnings("NonConstantLogger")
    Logger logger; 
    MessageFactory messageFactory = null;

    public SoapListenerMDB() 
    {
        this.logger = Logger.getLogger("testing SOAP...");
    }
    
    @Override
    @SuppressWarnings("LoggerStringConcat")
    public void onMessage(Message message) 
    {
        try {
            messageFactory = MessageFactory.newInstance();
        String name = message.getStringProperty("name");
         logger.info("Received msg " + message + ", from " + name);
        //Convert JMS to SOAP message
        SOAPMessage soapMessage = MessageTransformer.SOAPMessageFromJMSMessage(message, messageFactory);


        //Print attchment counts
        System.out.println("message received! Attachment counts: " + soapMessage.countAttachments());

        //Get attachment parts of the SOAP message
        Iterator iterator = soapMessage.getAttachments();
        while (iterator.hasNext()) {
            //Get next attachment
            AttachmentPart ap = (AttachmentPart) iterator.next();

            //Get content type
            String contentType = ap.getContentType();
            System.out.println("content type: " + contentType);

            //Get content id
            String contentID = ap.getContentId();
            System.out.println("content Id:" + contentID);
    
            //Check to see if this is text    
            
            if ("text".equals(contentType) )
            {
                 //Get and print string content if it is a text attachment
                String content = (String) ap.getContent();
                System.out.println("*** attachment content: " + content);
            }
         
        }
    }   catch (SOAPException ex) {
            Logger.getLogger(SoapListenerMDB.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JMSException ex) {
            Logger.getLogger(SoapListenerMDB.class.getName()).log(Level.SEVERE, null, ex);
        }
 
    }
    
}

=======================================================================================
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.test.code;

import java.util.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.jms.Message;
import javax.jms.BytesMessage;
import javax.jms.Session;
import javax.jms.JMSException;

import javax.xml.messaging.*;
import javax.xml.soap.*;

public class MessageTransformer 
{
   public static Message
    SOAPMessageIntoJMSMessage (SOAPMessage soapMessage, Session session) throws JAXMException 
    {

        try 
        {
            /**
             * Construct a bytes message object.
             * This is to make sure the utility works across all vendors.
             */
            BytesMessage bmessage = session.createBytesMessage();

            /**
             * This is here to make sure that RI's bad SOAP implementation
             * will get updated for internal buffers.
             */
            soapMessage.saveChanges();

            /**
             * Write SOAP MIME headers.
             */
            writeMimeHeaders (soapMessage, bmessage);

            /**
             * write message body to byte array output stream.
             */
            writeSOAPBody (soapMessage, bmessage);

            return bmessage;

        } 
        catch (JAXMException JAXMe) 
        {
            throw JAXMe;
        } 
        catch (Exception e) 
        {
            Logger.getLogger(MessageTransformer.class.getName()).log( Level.SEVERE, null, e );
            throw new JAXMException (e);
        }
    }

    /**
    * Extracts a <code>javax.xml.soap.SOAPMessage</code> object from the
    * <code>javax.jms.Message</code> object into which it was transformed
    * using the <code>SOAPMessageIntoJMSMessage</code> method.
    *
    * The <code>MessageFactory</code> parameter is used to construct the
    * <code>javax.xml.soap.SOAPMessage</code> object.
    * <p>
    * If <code>MessageFactory</code> is <code>null</code> then the
    * default SOAP MessageFactory will be used to construct the
    * SOAP message.
    *
    * @param message The JMS message from which the SOAP message is to be extracted.
    * @param messageFactory The SOAP MessageFactory to be used to contruct the SOAP message.
    *
    * @exception JAXMException If any error is encountered when extracting the message.
    */
    public static SOAPMessage
    SOAPMessageFromJMSMessage(Message message, MessageFactory messageFactory) throws JAXMException 
    {

        SOAPMessage soapMessage = null;
        BytesMessage bmessage = (BytesMessage) message;

        try 
        {

            //1. construct mime header
            int mimeLength = bmessage.readInt();
            byte[] mbuf = new byte [mimeLength];
            bmessage.readBytes(mbuf, mimeLength);

            ByteArrayInputStream mbin = new ByteArrayInputStream (mbuf);
            ObjectInputStream oi = new ObjectInputStream (mbin);
            @SuppressWarnings("UseOfObsoleteCollectionType")
            Hashtable ht = (Hashtable) oi.readObject();
            MimeHeaders mimeHeaders = hashtableToMime (ht);

            //2. get soap body stream.
            int bodyLength = bmessage.readInt();
            byte[] buf = new byte [bodyLength];
            bmessage.readBytes(buf, bodyLength);

            ByteArrayInputStream bin = new ByteArrayInputStream (buf);

            if ( messageFactory == null ) {
                messageFactory = getMessageFactory ();
            }

            //3. construct soap message object.
            soapMessage = messageFactory.createMessage(mimeHeaders, bin );

        }
        catch (IOException | ClassNotFoundException | JMSException | SOAPException e) 
        {
            throw new JAXMException (e);
        }

        return soapMessage;
    }

    /**
     * Write MIME headers to JMS message body.
     */
    private static void
    writeMimeHeaders (SOAPMessage soapMessage, BytesMessage bmessage) throws Exception 
    {

        /**
         * Convert JAXM MIME headers to Hashtable
         */
        MimeHeaders mimeHeaders = soapMessage.getMimeHeaders();
        @SuppressWarnings("UseOfObsoleteCollectionType")
        Hashtable hashtable = MimeToHashtable (mimeHeaders);

        try ( /**
         * Write hashtable to object output stream
         */ ByteArrayOutputStream mimeOut = new ByteArrayOutputStream()) {
            try (ObjectOutputStream oo = new ObjectOutputStream (mimeOut)) {
                oo.writeObject( hashtable );
                oo.flush();
            }
            /**
             * convert mime output stream to byte array.
             */
            byte[] mimebuf = mimeOut.toByteArray();
            /**
             * Write buffer length to JMS bytes message.
             */
            bmessage.writeInt(mimebuf.length);
            /**
             * Write header byte[] to JMS bytes message.
             */
            bmessage.writeBytes( mimebuf );
            /**
             * Close streams.
             */
            //System.out.println ("SOAP to JMS mime length: " + mimebuf.length);
        }
    }

    /**
     * Write SOAP message body to JMS bytes message.
     */
    private static void
    writeSOAPBody (SOAPMessage soapMessage, BytesMessage bmessage) throws Exception 
    {

        try (ByteArrayOutputStream bodyOut = new ByteArrayOutputStream()) {
            soapMessage.writeTo(bodyOut);
            /**
             * Convert byte array output stream to byte[].
             */
            byte[] buf = bodyOut.toByteArray();
            /**
             * Write message body byte[] length.
             */
            bmessage.writeInt(buf.length);
            /**
             * Write message body byte[] buffer.
             */
            bmessage.writeBytes(buf);
            //System.out.println ("SOAP to JMS body length: " + buf.length);
        }
    }

    /**
     * Convert MimeHeaders to Hashtable.  The hashtable is then used to write
     * to JMS BytesMessage.
     */
    @SuppressWarnings("UseOfObsoleteCollectionType")
    private static Hashtable
    MimeToHashtable ( MimeHeaders mimeHeaders ) {

        Hashtable hashtable = new Hashtable();
        Iterator it = mimeHeaders.getAllHeaders();

        while ( it.hasNext() ) {
            MimeHeader mh = (MimeHeader) it.next();
            hashtable.put(mh.getName(), mh.getValue());

            //System.out.println("name: " + mh.getName() + "  Val: " + mh.getValue());
        }

        return hashtable;
    }

    /**
     * Convert Hashtable to MimeHeaders.  Used when converting from JMS
     * to SOAP messages.
     */
    private static MimeHeaders
    hashtableToMime (@SuppressWarnings("UseOfObsoleteCollectionType") Hashtable hashtable) 
    {
        MimeHeaders mimeHeaders = new MimeHeaders();

        Enumeration enm = hashtable.keys();
        while ( enm.hasMoreElements() ) {
            Object key = enm.nextElement();
            mimeHeaders.addHeader((String)key, (String)hashtable.get(key));
        }

        return mimeHeaders;
    }

    /**
     * Get SOAP message factory from JMS message.
     * @param message JMS message.
     */
    private static MessageFactory
    getMessageFactory () throws SOAPException 
    {
        return MessageFactory.newInstance();
    }
  
}
